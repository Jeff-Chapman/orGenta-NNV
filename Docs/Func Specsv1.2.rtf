{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fswiss\fcharset0 Calibri;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green255\blue255;}
{\*\generator Riched20 10.0.22000}\viewkind4\uc1 
\pard\nowidctlpar\sa200\sl276\slmult1\qc\kerning1\f0\fs48\lang1033 orGenta 2.2 NNV \ul\i\fs36\par
Functional Specifications and Technical Descriptions\ulnone\i0\fs24\par

\pard\nowidctlpar\sl240\slmult1\qr\fs22\par
Document Version 2.1 -- 15 February 2023\fs24\par

\pard\nowidctlpar\sa200\sl276\slmult1\par
\fs32 Background, Use Case, and Storage\fs24\par
\fs32 orGenta is knowledge management software to suit a very specific need: organizing small tidbits of information about people, processes, and things, into Categories. The focus is to provide low-profile rapid entry of this information, called Items, into a backing database. The software than lexically matches the Item information to hierarchical Categories, forming Relationships between the two. \fs24\par
\fs32 orGenta also provides easy Item recall that deliberately retrieves information from the related Category(s). This allows a user to experience the collateral enlightenment one experiences when, for example, browsing library shelves, where one may discover or be reminded of ancillary knowledge worth exploring. A deeper level of detail, called Notes, may be appended to an Item to provide nearly unlimited rich text and linked information. \fs24\par
\fs32 orGenta version 1.0, for personal knowledge management, was released in 2006 with a Microsoft Access backing database, and only supported one database (also called a Knowledge Base) open at a time. This new version, 2.2, is intentionally designed to support several concurrently open Knowledge Bases, both personal and shared corporate, across multiple commonly popular database engines. Although the software was designed to easily expand to large-scale network databses (such as SQL Server) the NNV version that is available as open source does not support large networked databases, only MS Access and SQLite.\fs24\par
\fs32 The backing database has just five tables: Categories, Items and Notes hold the user entered data. Rels contains the many-too-many relationship between Categories and Items. Finally Sysvars has system level parameters and may eventually house tunable operating characteristics that the user can modify in Settings. \fs24\par
\fs32 Attention has been paid in the software design to "fail gracefully" in the event of the loss of a database or internet connection. When this happens, wherever possible work in progress is stored in a local cache database. Items that are cached locally get displayed in a subordinate table when a user views a Category's Items. \fs24\par
\par
\i\fs28 The following are the functional specifications for the free Windows version of orGenta NNV version 2.2:\i0\fs24\par
\par
\fs32 Main Screen\fs24\par
\fs32 When the user starts orGenta it should connect to the localcached.mdb database, and also the default Knowledge base, orGenta.mdb, and then display the Main screen and the Category window.\fs24\par
\fs32 Then the Main screen in orGenta should be a Windows MDI form, that provides menu and toolbar functionality and also encapsulates the child windows for Category and Item Displays. The software should be designed to prevent more than one instance starting; there should never be more than one Main screen allowed. \fs24\par
\fs32 The Main screen should have a floating side Utilities Window that presents varying actionable content depending upon what the user is selecting. The Main screen should be movable and resizable; the Utilities Window should stay appropriately attached in the same relative position during this process. The title on the Main screen should be appended with the name of the open Knowledge Base.\fs24\par
\fs32 The menu bar in the Main screen should have pulldowns for File, Edit, View, Tools, and Help. The File menu should contain options for opening another Knowledge Base, setting up and using a Printer, Exiting the software, and switching to work in "Trayed" Mode (more about that further along later). The Edit menu should contain options for Finding user information, and manually Assigning an Item to a Category. The View menu should contain options for "zooming" into an item, and managing the layout and visibility of the Category hierarchy. The Tools menu should allow the user to Export Items and Notes to a ".csv" file format, import files in various formats, and create new Knowledge Bases. In the Help menu, the About box should show the runtime version information. (In the future, the software should also supply options to update the software Settings and link to Online Help.)\fs24\par
\fs32 The toolbar in the Main screen should have buttons for switching into "Trayed" Mode, finding user information, and managing the layout and visibility of the Category hierarchy. When the user depresses and holds the shift key during startup, the toolbar should display a checkbox to toggle the debug mode.\fs24\par
\par
\fs32 Category Window\fs24\par
\fs32 The Category window should display the hierarchy treeview of the Knowledge Base in a sizable child window of the Main screen. If more than one Knowledge Base is open then there should be a distinct Category window for each Knowledge Base. The title of the Category window should match the name of the Knowledge Base it represents. When a Knowledge Base is initially installed, before any user interaction, it should contain three predefined categories: Main, Unassigned, and TrashCan. When a user positions their mouse over a Category it should highlight to show it has been selected. \fs24\par
\fs32 Nearly all of the actions that a user performs on Categories begins with a right-click of the mouse, which should display the Context Menu. The Context Menu should contain options for Adding, Editing, and Deleting Categories, Promoting or Demoting a Category node within the treeview, Cut and Paste operations for Categories, and options to manage the layout and visibility of the Category hierarchy.\fs24\par
\fs32 When the user selects Add Node the category window should expand to display a textbox for entering the new category name. After entering the name the user should be able to select whether to insert the Category below the presently selected Category as a sister, or to indent it as a child. After pressing the OK button the new Category should appear in the treeview and the category window should contract back to its original size. \fs24\par
\fs32 When the user selects Edit Node the category window should expand to display a textbox for editing the Category name. It should also include two option checkboxes to set the category to "Manual Assignment" or to trigger automatic rescanning of the Knowledge Base to check for updated Item matches. After pressing the OK button the Category should appear as edited in the treeview and the category window should contract back to its original size. \fs24\par
\fs32 When the user clicks on a Category with the left mouse button the software should display an Items Window for that Category. \fs24\par
\par
\fs32 Items Window\fs24\par
\fs32 The title bar on the Items form should show both the name of the Knowledge Base and the Category it is displaying. The Items window should populate a grid that displays all of the Items assigned to this Category. Above the top of the grid orGenta should show a textbox where the user can enter new Items. If there are any items held in the local Item cache they should display in another cached-item grid underneath the Knowledge Base items grid.\fs24\par
\fs32 When the user types in a new item, it should enable both the +Note button and the OK button. The user can click on the +Note button to enter a more extensive note in a separate Note Window. To complete entering the new Item the user may press the Enter key or click on the OK button. The software should then update the grid to show the newly entered Item, or if this is impossible it should cache the Item locally and update the cached-item grid. After the user enters the new Item orGenta should automatically parse the text to check in the background if a relationship exists between this item and any matching Category(s). \fs24\par
\fs32 A user may edit an Item's text by clicking on it within the grid and just typing in the modified words directly. When the user then presses the Enter key,  leaves the cell with an arrow up or down, or clicks on a different cell, the changes to the Item get saved to the Knowledge Base. A user may add or edit a Note on an existing Item by clicking on the checkbox in the grid directly preceding that Item.\fs24\par
\fs32 After clicking on the box farthest left in the row, a user may delete one or more selected Items by pressing the delete key. To select several rows simultaneously the user may either hold the Ctrl key down for individual clicks, or the Shift key to select an entire range. When the user deletes a row(s) a Delete Options box should appear where the user chooses whether to remove the item entirely from the Knowledge Base, or simply remove the item from its presently shown category (in other words, disassociating it). \fs24\par
\fs32 Items that are deleted entirely should be added to and shown within the TrashCan category. When Items are deleted from the TrashCan category however, they should be set with a deletion flag so they no longer appear anywhere in the user interface. Items that are disassociated from a Category may still appear in other Categories that they are assigned to. If an Item gets disassociated from the -only- (or last remaining) Category it is related to, then it should get added to and shown within the TrashCan category.\fs24\par
\fs32 It is possible for a user to enter a string of text into an Item that is longer than can easily display in a grid cell. By pressing the F8 function key the software should "zoom into" the current item and display it in a popup form with wraparound text that is more easily legible.\fs24\par
\par
\fs32 Trayed Mode\fs24\par
\fs32 When the user clicks on the Trayed icon in the toolbar or selects Trayed Mode from the main screen menu, the orGenta user interface should disappear and instead its icon, a tiny butler holding a tray with a yellow note, should appear in the systems tray. When the user clicks this icon a single-line textbox should appear in the lower right of the screen. This textbox may be used either for immediate searching or for entering a new Item. When the user enters a single word and then presses the enter key, the software should perform a "stacked" search, first finding any matching categories. If no categories match, it then should search Items and Notes for a match. Once it finds a match it should restore the user interface, either highlighting the matched Category or displaying a search results Items form. \fs24\par
\fs32 If the user enters more than a single word then Trayed mode should treat the entered text as a new item, and should add it to the Unassigned category. It then should trigger the process for background automatic Category assignment. \fs24\par
\fs32 At the far right of of the Trayed textbox entry is an up-arrow button. Clicking this should restore the user interface, exiting Trayed mode. The user may also double-click the system tray icon to restore the user interface and exit Trayed mode. \fs24\par
\par
\fs32 Connecting to a Different Knowledge Base\fs24\par
\fs32 When the user clicks on File, Open Knowledge Base, orGenta should display a form to gather database connection information. If a user selects a different database, an option checkbox should appear that allows them to save this new connection as the default upon startup. \fs24\par
\fs32 If the user clicks on the three dots to open it from file explorer the only valid choices should be MS Access and SQlite databases. When the user clicks the Next button, the main orGenta screen should appear showing the additional Category window for the newly attached Knowledge base.\fs24\par
\par
\fs32 Printing\fs24\par
\fs32 When the user clicks Print Setup from the main screen menu, orGenta should check if there is a printer defined and then it should display the printer Options screen, where the user may adjust margins and the print orientation settings. After the printer has been setup the software should enable the two menu options for Print Items and Print Preview. When the user clicks on these the software should send the information in the current top Items form out to be printed, or it should show them in a preview window. The software also should include any Notes that have been entered for any of the shown Items. The print preview window should allow the user to change the fonts used for printing.\fs24\par
\par
\fs32 Manual Category Assignment\fs24\par
\fs32 To manually assign an Item to a Category (even though the Item lacks that word in its contents) the user first clicks on the gray box to the left of an item row to select an entire row. Optionally the user my hold their Ctrl or shift keys down to click on and select additional Item rows. Then from the Main menu the user selects Assign To, and the software should display a list of all Categories preceded by check boxes. When the user clicks the OK button the software should create a Relationship to assign the selected item(s) to the checked categories. \fs24\par
\par
\fs32 Utility Window\fs24\par
\fs32 The small Utility window to the right of the main screen should  show either a list of the other open Windows, or when an Item is selected, the Categories that Item has been assigned to. The title of the window switches according to either Open Windows or Item Categories. When the user clicks on one of the titles in Open Windows, that window should receive the focus and display in the Main screen. When the user clicks on one of the titles in Item Categories, a new Items window should appear in the Main screen listing all of the Items for that clicked-upon Category. \par
\par
Advanced Settings\par
When the user chooses Settings from the Tools menu, a Settings window should display the system level modifiable options, including Wrapping Item text and Automatically creating categories when Trayed.\par
\par
\i\fs28 The following are technical descriptions for some of the more significant routines in the free Windows version of orGenta NNV version 2.2:\i0\fs32  \par
\par
Primary Routines\par
orGenta has around 400 routines, but the routines that do the "heavy lifting" are listed below, followed by more in-depth discussions of how they work with any oddities of note.\par
\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl\kerning0\fs22 Class\cell Member\cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  frmMain\cell  frmMain_Load(object, EventArgs) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl\fs24  frmMain\cell  BuildAndValidateDBconx(bool) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  frmMain\cell  StandardDBfixRoutine(string, string, string, string, string) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  frmMain\cell  menuAssignTo_Click(object, EventArgs) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  frmMain\cell  menuExportCSV_Click(object, EventArgs) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  frmMain\cell  menuItems2email_Click(object, EventArgs) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  TreeViewForm\cell  BuildCatTree() \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  TreeViewForm\cell  AddNodeToTV(DataRow) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  TreeViewForm\cell  SetContextMenu() \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  TreeViewForm\cell  tvCategories_NodeMouseClick(object, ...)\cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  TreeViewForm\cell  PersistNewCat(TreeNode) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  TreeViewForm\cell  pasteAsChildOrBelow(bool) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  TreeViewForm\cell  PasteCatAndItems(TreeNode, TreeNode) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  ItemsForm\cell  ItemsForm_Load(object, EventArgs) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  ItemsForm\cell  LoadUptheGrids(string, string) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  ItemsForm\cell  ItemGrid_MouseUp(object, MouseEventArgs) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  ItemsForm\cell  BuildAndShowNote(string) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  ItemsForm\cell  persistItemandNotesToCache() \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  ItemsForm\cell  SoftAssign(string) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  NoteForm\cell  btnOK_Click(object, EventArgs) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  MinimalIntface\cell  txtDataEntered_KeyPress(object, KeyPressEventArgs) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  ImportStuff\cell  ImportItemsFromFile(string) \cell\row\trowd\trgaph30\trleft-30\trrh270\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  ImportStuff\cell  LoadImportToTable(StreamReader) \cell\row\trowd\trgaph30\trleft-30\trrh256\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\clvertalb\cellx1766\clvertalb\cellx8090 
\pard\intbl  AdvancedPrint\cell  prtGridPrintDoc_PrintPage(object, PrintPageEventArgs) \cell\row 
\pard\nowidctlpar\sa200\sl276\slmult1\kerning1\fs32\par
\i frmMain:frmMain_Load\i0  Invoked on startup, this module performs initializations, including restoration of screen formatting and user options, setting of debug mode, prevention of runtime duplication, cache connection, memory caching of stopwords, Knowledge Base default value settings, and initial user database connectivity.\par
\i frmMain:BuildAndValidateDBconx (in module frmMain_DBstuff) \i0 Called whenever a Knowledge Base is opened, this module sets up a Knowledge Base's connectivity to a backing Database. It builds the connection string for the backing database, sets flags indicating the database type, opens a connection, and validates the version information in Sysvars. Note that although this runs in the frmMain class, database flags and connection are properties of the TreeViewForm class and get stored in the currently active instance of that class (There is a one-to-one relationship between an instance of a TreeViewForm class and a Knowledge Base).\fs24\par
\i\fs32 frmMain:StandardDBfixRoutine (in module frmMain_DBstuff) \i0 Once a Database is connected to a Knowledge Base, but before the TreeView on the current TreeViewForm gets built and displayed, this routine gets invoked to correct any mistakes in the backing database that may have been caused by previous incomplete shutdowns. This is a fully generic routine that gets passed in two SQL statements: one that identifies the problem rows, and the second that corrects them.\fs24\par
\i\fs32 frmMain:menuAssignTo_Click (in module frmMain_menuItems) \i0 Invoked either by the menu bar or the ItemsForm context menu, this routine operates on selected rows in the ItemsForm to allow the user to manually build a relationship between Items and Categories. It displays \f1 a \cf1\kerning0 GetCatsForm for the user interface and then processes each individual Item and Category combination selected. Items and Categories have a many-to-many relationship through the Rels table.\par
\cf0\kerning1\i\f0 frmMain:menuExportCSV_Click (in module frmMain_menuItems) \i0 This routine takes an open ItemsForm and exports first the headers, than the data in the GridView, and then their notes, all in .csv format.\par
\i frmMain:menuItems2email_Click (in module frmMain_menuItems) \i0 This routine builds an eMail message from the open ItemsForm showing all the Items and their Notes, and then launches the user's eMail client with a draft of this message.\par
\i TreeViewForm:BuildCatTree \i0 Invoked either from the frmMain when loading a new TreeViewForm, of from the context menu when a cross-KB copy finishes its background paste, this routine drives the loading of nodes into the Treeview from the backing Category table of the Knowledge Base's database. For each datarow returned in the source SQL statement, it calls \cf1\kerning0\f1 AddNodeToTV to append the new node to its parent and to fill out the node's Tag information.\cf0\kerning1\f0\fs24\par
\i\fs32 TreeViewForm:AddNodeToTV \i0 This routine builds the \cf1\kerning0\f1 TagStruct data structure, the tag associated with each node added to the TreeView. This structure is internally important as it gets referenced in numerous places to track various attributes of the Category. Then after adding the new node to its parent, this module updates the arraylist FullPathList containing the fully qualified path of the node (used internally when a specific node needs to be identified, since nodes may have duplicate single-word names).\cf0\kerning1\f0\fs24\par
\i\fs32 TreeViewForm:SetContextMenu \cf1\kerning0\i0\f1 Invoked when the user hovers over a Category node, this routine enables or disables items in the context menu for the Treeview. Certain menu items are only relevant for child nodes, for example, or when a copy-paste operation has been initiated. \par
\cf0\kerning1\i\f0 TreeViewForm:tvCategories_NodeMouseClick \cf1\kerning0\i0\f1 Handles left-clicks on a TreeViewForm Category node, retrieving and then displaying all of the items for the clicked upon Category in a new ItemsForm window. Also calls BuildItemCatXref to \cf0 cross-reference between the ItemsForm data rows and the Category fullpaths. Strategically positions the mouse pointer over the titlebar of the new ItemsForm window and click on it, hence setting correct focus on the Item entry area at the top of the form ready to receive user input.\par
\kerning1\i\f0 TreeViewForm:PersistNewCat \kerning0\i0\f1 Persists new Category nodes to the backing database. The SortSeq field is set from the relative postion of the node amongst its siblings in the Treeview.  Returns the identity value of the newly inserted row so that the rowID in the \cf1 TagStruct can get updated.\par
\cf0\kerning1\i\f0 TreeViewForm:pasteAsChildOrBelow (in module TreeViewForm_menuItems) \cf1\kerning0\i0\f1 Invoked from either of two options within the context menu, this routine moves a Category node (and it's children) within the Treeview. The initial copy could have been across Knowledge Bases, in which case the deleteAfterPasteFlag is false. After the paste the routine makes sure the node is visible within the user interface. In the case of a copy across Knowledge Bases, the routine also copies and pastes the associated items within each Cateogory (and it's children). To do this the return calls PasteChildDrill, which calls itself to recursivly traverse all the child nodes.\par
\cf0\kerning1\i\f0 TreeViewForm:PasteCatAndItems (in module TreeViewForm_menuItems) \cf1\kerning0\i0\f1 this routine, invoked by the  PasteChildDrill, handles the cross Knowledge Base paste operation for an individual node and its data. If the target Category node doesn't already exist, a new one is created. It then selects all of the Items data for that Category in the source and then for each Items row calls AddnewItemFor, which will add the new Item (if it hasn't already been added from being related to a previously pasted Category) and also add a new Rels relationship row.\par
\cf0\kerning1\i\f0 ItemsForm:ItemsForm_Load \cf1\kerning0\i0\f1 This may be invoked either by a click on a Category, a click in the Utility Sidebar, a search from the menu, or a search from the Minimal Interface.  The main purpose of this routine is to load up the DataGridView on the form. It sets the SQL command to retreive the Items from the Knowledge Base, calls LoadUptheGrids, and handles search exceptions.\par
\cf0\kerning1\i\f0 ItemsForm:LoadUptheGrids \cf1\kerning0\i0\f1 The first section of this routine sets column types in the DataGridView to match those in the backing Knowledge Base. Then it reads the data from the Knowledge Base and sets a primary key on the rows to avoid duplicate rows. If the grids are loading due to a search, this routine appends data from matching Notes. Then it merges the incoming data to orGentaDBDataSet, which is the dataset backing the DataGridView. \par
\cf0\kerning1\i\f0 ItemsForm:ItemGrid_MouseUp (in module ItemsForm_Actions) \cf1\kerning0\i0\f1 This routine provides support for executing code on mouse clicks on the  DataGridView beyond those already handled by the DataGridView itself. If they clicked the Note toggle-box then this routine calls BuildAndShowNote to display the backing Note data. It also fill the side Utilities bar with the list of all Categories this particular Item is assigned to. \par
\cf0\kerning1\i\f0 ItemsForm:BuildAndShowNote \cf1\kerning0\i0\f1 Retreives an Item's Note info from the backing database, properly positions a new NoteForm with a note display box, sets both the display text and the hidden original text in the form, and highlights prompting text as necessary.\par
\cf0\kerning1\i\f0 ItemsForm:persistItemandNotesToCache \cf1\kerning0\i0\f1 In the case where writing to a backing database fails, this routine creates a text file to save the SQL statements that would have been used to store the data. It then saves a copy of the data to the localCache.mdb.\par
\cf0\kerning1\i\f0 ItemsForm:SoftAssign \cf1\kerning0\i0\f1 Invoked after a new Item gets entered, this routine adds rows to the arraylist PossibleAssigns that match words within the Item to matching Catgegories. If it finds any matches it enables a background timer-triggered thread that will create the Rels that actually link the Item to their matching Catgegories.  \par
\cf0\kerning1\i\f0 NoteForm:btnOK_Click \cf1\kerning0\i0\f1 This routine handles entry of a new Note. If the Note is being entered on a new Item, the data is passed back to the ItemsForm where it gets saved later to the Knowledge Base. If the Item already exists in the Knowledge Base then this routine saves the corresponding Note data to the Knowledge Base, either with an insert (if the Note is new) or with an update.\par
\cf0\kerning1\i MinimalIntface:txtDataEntered_KeyPress \cf1\kerning0\i0 This routine provides specialized coding to highlight typed words in real-time as they are entered. Depending upon user settings, the highlighted words may be either suggested categories, existing matching categories, or both. It calls checkWordForHighlighting which will add the qualified wordToCheck to one of two arrayLists. Matching words must be 4 or more letters in length, and not exist in the orgStopWords.txt file.\par
\cf0\kerning1\i ImportStuff:ImportItemsFromFile \cf1\kerning0\i0 After an initial complete file read to gather incoming record count, this routine calls either a routine to import XML data, or a routine for all other importing data, and then displays the final imported Items count.\par
\cf0\kerning1\i ImportStuff:LoadImportToTable \cf1\kerning0\i0 Driver routine for importing data for non-XML files. Allows for mid-process cancels. Calls ProcessImportedItem for each individual Item.\par
\cf0\i\f0 AdvancedPrint:prtGridPrintDoc_PrintPage \cf1\i0\f1 Routine for printing Items and Notes from the Knowledge Base. Includes extensive internal documentation.\cf0\kerning1\par
}
 